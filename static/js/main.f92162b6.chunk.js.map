{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/CounterFeedbacks/CounterFeedbacks.jsx","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","CounterFeedback","state","handelAddFeedback","setState","prevState","this","Math","floor","countTotalFeedback","Object","keys","countPositiveFeedbackPercentage","Component","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"4WAoBeA,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKC,UAAU,WAAf,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEF,UAAU,gBACVG,KAAK,SAELC,QAAS,kBAAML,EAAgBG,IAJjC,SAMGA,GAHIA,S,MCuBAG,MA7Bf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAKV,UAAU,OAAf,SACE,qBAAIA,UAAU,aAAd,UACE,qBAAIA,UAAU,mBAAd,UACE,mBAAGA,UAAU,uBAAb,mBACA,4BAAIM,OAEN,qBAAIN,UAAU,sBAAd,UACE,mBAAGA,UAAU,uBAAb,sBACA,kCAAKO,QAEP,qBAAIP,UAAU,kBAAd,UACE,mBAAGA,UAAU,uBAAb,kBACA,kCAAKQ,QAEP,qBAAIR,UAAU,oBAAd,UACE,mBAAGA,UAAU,uBAAb,oBACA,kCAAKS,QAEP,qBAAIT,UAAU,sBAAd,UACE,mBAAGA,UAAU,uBAAb,gCACA,kCAAKU,EAAL,gB,MCdKC,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qCACGD,GAAS,oBAAIZ,UAAU,iBAAd,SAAgCY,IACzCC,M,MCGQC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,qBAAKf,UAAU,aAAf,SACE,oBAAIA,UAAU,oBAAd,SAAmCe,OC2D1BC,E,4MAxDbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,kBAAoB,SAAAhB,GAClB,EAAKiB,UAAS,SAAAC,GAAS,sBACpBlB,EAASkB,EAAUlB,GAAU,O,wDAIlC,WACE,OAAOmB,KAAKJ,MAAMX,KAAOe,KAAKJ,MAAMV,QAAUc,KAAKJ,MAAMT,M,6CAG3D,WACE,OAAOc,KAAKC,MAAOF,KAAKJ,MAAMX,KAAOe,KAAKG,qBAAwB,O,oBAGpE,WACE,OACE,mCACE,sBAAKxB,UAAU,UAAf,UACE,cAAC,EAAD,CACEY,MAAO,sCACPC,SACE,cAAC,EAAD,CACEf,QAAS2B,OAAOC,KAAKL,KAAKJ,OAC1BlB,gBAAiBsB,KAAKH,sBAK3BG,KAAKG,qBAAuB,EAC3B,cAAC,EAAD,CACEZ,MAAO,aACPC,SACE,cAAC,EAAD,CACEP,KAAMe,KAAKJ,MAAMX,KACjBC,QAASc,KAAKJ,MAAMV,QACpBC,IAAKa,KAAKJ,MAAMT,IAChBC,MAAOY,KAAKG,qBACZd,mBAAoBW,KAAKM,sCAK/B,cAAC,EAAD,CAAcZ,QAAQ,+B,GAjDJa,aCIfC,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.f92162b6.chunk.js","sourcesContent":["import './FeedbackOptions.css';\nimport React from 'react';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className=\"feedback\">\n      {options.map(option => (\n        <button\n          className=\"feedback__btn\"\n          type=\"button\"\n          key={option}\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n","import './statistics.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div className=\"rate\">\n      <ul className=\"rate__list\">\n        <li className=\"rate__item--good\">\n          <p className=\"rate__item__subtitle\">Good:</p>\n          <p>{good}</p>\n        </li>\n        <li className=\"rate__item--neutral\">\n          <p className=\"rate__item__subtitle\">Neutral:</p>\n          <p> {neutral}</p>\n        </li>\n        <li className=\"rate__item--bad\">\n          <p className=\"rate__item__subtitle\">Bad:</p>\n          <p> {bad}</p>\n        </li>\n        <li className=\"rate__item--total\">\n          <p className=\"rate__item__subtitle\">Total:</p>\n          <p> {total}</p>\n        </li>\n        <li className=\"rate__item--percent\">\n          <p className=\"rate__item__subtitle\">Positive feedback:</p>\n          <p> {positivePercentage}%</p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import './Section.css';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <>\n      {title && <h2 className=\"section__title\">{title}</h2>}\n      {children}\n    </>\n  );\n}\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import './Notification.css';\n\nfunction Notification({ message }) {\n  return (\n    <div className=\"nofeedback\">\n      <h2 className=\"nofeedback__title\">{message}</h2>\n    </div>\n  );\n}\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport './CounterFeedbacks.css';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\nimport Section from '../Section/Section';\nimport Notification from '../Notification/Notification';\n\nclass CounterFeedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handelAddFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.floor((this.state.good / this.countTotalFeedback()) * 100);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"wrapper\">\n          <Section\n            title={'Magical unicorns want your opinion!'}\n            children={\n              <FeedbackOptions\n                options={Object.keys(this.state)}\n                onLeaveFeedback={this.handelAddFeedback}\n              />\n            }\n          />\n\n          {this.countTotalFeedback() > 0 ? (\n            <Section\n              title={'Statistics'}\n              children={\n                <Statistics\n                  good={this.state.good}\n                  neutral={this.state.neutral}\n                  bad={this.state.bad}\n                  total={this.countTotalFeedback()}\n                  positivePercentage={this.countPositiveFeedbackPercentage()}\n                />\n              }\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default CounterFeedback;\n","import React from 'react';\nimport CounterFeedbacks from './components/CounterFeedbacks/CounterFeedbacks';\n\nconst App = () => {\n  return (\n    <>\n      <CounterFeedbacks />\n    </>\n  );\n};\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}